<#***************************************************************************************
*  __   __  ___        ___  ______    _____   __   __   ________  ___      ___  _______
* |  | |  | \  \  /\  /  / |   _  \  |   __| |  | |  | |__    __| \  \    /  / /   _   \
* |  |_|  |  \  \/  \/  /  |  | |  | |  |    |  |_|  |    |  |     \  \  /  /  |  | |  |
* |   _   |   \        /   |  | |  | |  |    |   _   |    |  |      \  \/  /   |  |_|  |
* |  | |  |    \  /\  /    |  |_|  | |  |__  |  | |  |  __|  |__     \    /    |   _   |
* |__| |__|     \/  \/     |______/  |_____| |__| |__| |________|     \__/     |__| |__|
*
*****************************************************************************************#>

#---------------------------------------------------
# Get Input parameters
#---------------------------------------------------
Param (
 [String]$Namespace = "gitversion",
 [String]$Project = "",
 [String]$GitRoot = "",
 [String]$HeaderFile="version.hh"
)

#---------------------------------------------------
# Set header
#---------------------------------------------------
$Year = Get-Date -format "yyyy" 
$VerFileHead_ = "/****************************************************************************************
* This file was auto-generated by a custom pre-build step
*  __   __  ___        ___  ______    _____   __   __   ________  ___      ___  _______
* |  | |  | \  \  /\  /  / |   _  \  |   __| |  | |  | |__    __| \  \    /  / /   _   \
* |  |_|  |  \  \/  \/  /  |  | |  | |  |    |  |_|  |    |  |     \  \  /  /  |  | |  |
* |   _   |   \        /   |  | |  | |  |    |   _   |    |  |      \  \/  /   |  |_|  |
* |  | |  |    \  /\  /    |  |_|  | |  |__  |  | |  |  __|  |__     \    /    |   _   |
* |__| |__|     \/  \/     |______/  |_____| |__| |__| |________|     \__/     |__| |__|
*
******************************************************************************************/

`#pragma once
`#include <string>
`#include <iostream>

namespace $Namespace {`n"

#---------------------------------------------------
# Set footer
#---------------------------------------------------
$VerFileFoot_ = "}`n"

#---------------------------------------------------
# Set print version function
#---------------------------------------------------
$PrintVersion_ = "
static void print_version()
{
	std::cout << `"Version: `" << $Namespace::VerTag_ << std::endl;
	std::cout << `"Built: `" <<  $Namespace::CompileTime_ << std::endl << std::endl;
}`n"

#---------------------------------------------------
# Set get version function
#---------------------------------------------------
$GetVersion_ = "
static std::string get_version()
{
	return $Namespace::VerTag_;
}`n"

#---------------------------------------------------
# Set get compile time function
#---------------------------------------------------
$GetCompileTime_ = "
static std::string get_compile_time()
{
	return $Namespace::CompileTime_;
}`n"

#---------------------------------------------------
# Change to git repo
#---------------------------------------------------
Push-Location -LiteralPath "$GitRoot"

#---------------------------------------------------
# Set version tag
#---------------------------------------------------
$Head = (git describe --abbrev=8 --always) | Out-String
if ($Head)
{
    # Verify if repo is dirty
	$VerChgs = ((git ls-files --exclude-standard -d -m -o -k) | Measure-Object -Line).Lines

	# Determine if there is a tag defined
	$Tag = (git name-rev --tags HEAD) | Out-String
	if ($Tag -match 'undefined') {
		$VerTag = "git-$Head"
        if ($VerChgs -gt 0) {
            $VerTag = "$VerTag-dirty"
        }
	} else {
		$VerTag = ($Tag.Split("/") | select -last 1).Split("^") | select -first 1
        if ($VerChgs -gt 0) {
		  $CommitId = (git rev-parse --short=8 HEAD) | Out-String
		  $VerTag = "$VerTag-$CommitId"
	   }
	}
}
else
{
	$VerTag = "UNDEF"
}

$VerTag = $VerTag -replace "`t|`n|`r",""

$VerTag_ = "`tconst std::string VerTag_=`"$VerTag`";`n"

#---------------------------------------------------
# Set Build Date
#---------------------------------------------------
$Date = Get-Date -format "MMMM dd, yyyy h:mm:ss tt"
$CompileTime_ = "`tconst std::string CompileTime_=`"$Date`";`n"

#---------------------------------------------------
# Write contents to version.hh
#---------------------------------------------------
"Written $Project" + (
  New-Item -Force -Path "$Project" -Name "$HeaderFile" -ItemType "file" -Value "$VerFileHead_$VerTag_$CompileTime_$VerFileFoot_$PrintVersion_$GetVersion_$GetCompileTime_"
).Name + " as:"
echo "---------------------------------------------"
Get-Content "$Project$HeaderFile"
echo "---------------------------------------------"

#---------------------------------------------------
# Set version number function for installer
#---------------------------------------------------
$VersionFile = "version.ini"
$VersionNumber = "[Version]
Ver=$VerTag`n"

#---------------------------------------------------
# Write contents to version.ini
#---------------------------------------------------
$InstallerDir = "${GitRoot}installer"
"Written $InstallerDir/" + (
  New-Item -Force -Path "$InstallerDir" -Name "$VersionFile" -ItemType "file" -Value "$VersionNumber"
).Name + " as:"
echo "---------------------------------------------"
Get-Content "$InstallerDir\$VersionFile"
echo "---------------------------------------------"

Pop-Location

